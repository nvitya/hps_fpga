// test6_soc_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module test6_soc_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		output wire [15:0] merlin_apb_translator_0_s0_paddr,                                    //                                    merlin_apb_translator_0_s0.paddr
		output wire        merlin_apb_translator_0_s0_psel,                                     //                                                              .psel
		output wire        merlin_apb_translator_0_s0_penable,                                  //                                                              .penable
		output wire        merlin_apb_translator_0_s0_pwrite,                                   //                                                              .pwrite
		output wire [31:0] merlin_apb_translator_0_s0_pwdata,                                   //                                                              .pwdata
		input  wire [31:0] merlin_apb_translator_0_s0_prdata,                                   //                                                              .prdata
		input  wire        merlin_apb_translator_0_s0_pslverr,                                  //                                                              .pslverr
		input  wire        merlin_apb_translator_0_s0_pready,                                   //                                                              .pready
		input  wire        clk_0_clk_clk,                                                       //                                                     clk_0_clk.clk
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        merlin_apb_translator_0_clk_reset_reset_bridge_in_reset_reset        //       merlin_apb_translator_0_clk_reset_reset_bridge_in_reset.reset
	);

	wire          rsp_mux_src_valid;                                              // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [111:0] rsp_mux_src_data;                                               // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                              // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                            // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                      // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                        // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                          // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [111:0] rsp_mux_001_src_data;                                           // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                          // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                        // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                  // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                    // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire   [15:0] merlin_apb_translator_0_s0_agent_altera_apb_master_paddr;       // merlin_apb_translator_0_s0_agent:paddr -> merlin_apb_translator_0_s0_translator:s0_paddr
	wire          merlin_apb_translator_0_s0_agent_altera_apb_master_pready;      // merlin_apb_translator_0_s0_translator:s0_pready -> merlin_apb_translator_0_s0_agent:pready
	wire   [31:0] merlin_apb_translator_0_s0_agent_altera_apb_master_prdata;      // merlin_apb_translator_0_s0_translator:s0_prdata -> merlin_apb_translator_0_s0_agent:prdata
	wire          merlin_apb_translator_0_s0_agent_altera_apb_master_pslverr;     // merlin_apb_translator_0_s0_translator:s0_pslverr -> merlin_apb_translator_0_s0_agent:pslverr
	wire   [31:0] merlin_apb_translator_0_s0_agent_altera_apb_master_pwdata;      // merlin_apb_translator_0_s0_agent:pwdata -> merlin_apb_translator_0_s0_translator:s0_pwdata
	wire          merlin_apb_translator_0_s0_agent_altera_apb_master_penable;     // merlin_apb_translator_0_s0_agent:penable -> merlin_apb_translator_0_s0_translator:s0_penable
	wire          merlin_apb_translator_0_s0_agent_altera_apb_master_psel;        // merlin_apb_translator_0_s0_agent:psel -> merlin_apb_translator_0_s0_translator:s0_psel
	wire          merlin_apb_translator_0_s0_agent_altera_apb_master_pwrite;      // merlin_apb_translator_0_s0_agent:pwrite -> merlin_apb_translator_0_s0_translator:s0_pwrite
	wire          merlin_apb_translator_0_s0_agent_altera_apb_master_paddr31;     // merlin_apb_translator_0_s0_agent:paddr31 -> merlin_apb_translator_0_s0_translator:s0_paddr31
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                   // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [111:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                    // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                   // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;           // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;             // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                               // router:src_valid -> cmd_demux:sink_valid
	wire  [111:0] router_src_data;                                                // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                               // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                             // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                       // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                         // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                    // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [111:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                     // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                    // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;            // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;              // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                           // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [111:0] router_001_src_data;                                            // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                           // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                         // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                   // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                     // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          merlin_apb_translator_0_s0_agent_rp_valid;                      // merlin_apb_translator_0_s0_agent:rp_valid -> router_002:sink_valid
	wire  [111:0] merlin_apb_translator_0_s0_agent_rp_data;                       // merlin_apb_translator_0_s0_agent:rp_data -> router_002:sink_data
	wire          merlin_apb_translator_0_s0_agent_rp_ready;                      // router_002:sink_ready -> merlin_apb_translator_0_s0_agent:rp_ready
	wire          merlin_apb_translator_0_s0_agent_rp_startofpacket;              // merlin_apb_translator_0_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          merlin_apb_translator_0_s0_agent_rp_endofpacket;                // merlin_apb_translator_0_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                           // router_002:src_valid -> rsp_demux:sink_valid
	wire  [111:0] router_002_src_data;                                            // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                           // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                         // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                   // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                     // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                              // cmd_mux:src_valid -> merlin_apb_translator_0_s0_burst_adapter:sink0_valid
	wire  [111:0] cmd_mux_src_data;                                               // cmd_mux:src_data -> merlin_apb_translator_0_s0_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                              // merlin_apb_translator_0_s0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                            // cmd_mux:src_channel -> merlin_apb_translator_0_s0_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                      // cmd_mux:src_startofpacket -> merlin_apb_translator_0_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                        // cmd_mux:src_endofpacket -> merlin_apb_translator_0_s0_burst_adapter:sink0_endofpacket
	wire          merlin_apb_translator_0_s0_burst_adapter_source0_valid;         // merlin_apb_translator_0_s0_burst_adapter:source0_valid -> merlin_apb_translator_0_s0_agent:cp_valid
	wire  [111:0] merlin_apb_translator_0_s0_burst_adapter_source0_data;          // merlin_apb_translator_0_s0_burst_adapter:source0_data -> merlin_apb_translator_0_s0_agent:cp_data
	wire          merlin_apb_translator_0_s0_burst_adapter_source0_ready;         // merlin_apb_translator_0_s0_agent:cp_ready -> merlin_apb_translator_0_s0_burst_adapter:source0_ready
	wire    [1:0] merlin_apb_translator_0_s0_burst_adapter_source0_channel;       // merlin_apb_translator_0_s0_burst_adapter:source0_channel -> merlin_apb_translator_0_s0_agent:cp_channel
	wire          merlin_apb_translator_0_s0_burst_adapter_source0_startofpacket; // merlin_apb_translator_0_s0_burst_adapter:source0_startofpacket -> merlin_apb_translator_0_s0_agent:cp_startofpacket
	wire          merlin_apb_translator_0_s0_burst_adapter_source0_endofpacket;   // merlin_apb_translator_0_s0_burst_adapter:source0_endofpacket -> merlin_apb_translator_0_s0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                           // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [111:0] cmd_demux_src0_data;                                            // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                           // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                         // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                   // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                     // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                       // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [111:0] cmd_demux_001_src0_data;                                        // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                       // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                     // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                               // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                 // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                           // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [111:0] rsp_demux_src0_data;                                            // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                           // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                         // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                   // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                     // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                           // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [111:0] rsp_demux_src1_data;                                            // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                           // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                         // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                   // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                     // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket

	altera_merlin_apb_translator #(
		.ADDR_WIDTH     (16),
		.DATA_WIDTH     (32),
		.USE_S0_PADDR31 (1),
		.USE_M0_PADDR31 (0),
		.USE_M0_PSLVERR (1)
	) merlin_apb_translator_0_s0_translator (
		.s0_paddr   (merlin_apb_translator_0_s0_agent_altera_apb_master_paddr),      //        s0.paddr
		.s0_psel    (merlin_apb_translator_0_s0_agent_altera_apb_master_psel),       //          .psel
		.s0_penable (merlin_apb_translator_0_s0_agent_altera_apb_master_penable),    //          .penable
		.s0_pwrite  (merlin_apb_translator_0_s0_agent_altera_apb_master_pwrite),     //          .pwrite
		.s0_pwdata  (merlin_apb_translator_0_s0_agent_altera_apb_master_pwdata),     //          .pwdata
		.s0_prdata  (merlin_apb_translator_0_s0_agent_altera_apb_master_prdata),     //          .prdata
		.s0_pslverr (merlin_apb_translator_0_s0_agent_altera_apb_master_pslverr),    //          .pslverr
		.s0_pready  (merlin_apb_translator_0_s0_agent_altera_apb_master_pready),     //          .pready
		.s0_paddr31 (merlin_apb_translator_0_s0_agent_altera_apb_master_paddr31),    //          .paddr31
		.clk        (clk_0_clk_clk),                                                 //       clk.clk
		.reset      (merlin_apb_translator_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.m0_paddr   (merlin_apb_translator_0_s0_paddr),                              //        m0.paddr
		.m0_psel    (merlin_apb_translator_0_s0_psel),                               //          .psel
		.m0_penable (merlin_apb_translator_0_s0_penable),                            //          .penable
		.m0_pwrite  (merlin_apb_translator_0_s0_pwrite),                             //          .pwrite
		.m0_pwdata  (merlin_apb_translator_0_s0_pwdata),                             //          .pwdata
		.m0_prdata  (merlin_apb_translator_0_s0_prdata),                             //          .prdata
		.m0_pslverr (merlin_apb_translator_0_s0_pslverr),                            //          .pslverr
		.m0_pready  (merlin_apb_translator_0_s0_pready),                             //          .pready
		.m0_paddr31 ()                                                               // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (87),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (88),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (2),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                    //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                     //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                                  //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                            //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                              //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                    //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                                //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                                 //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                              //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                        //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                          //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                                //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_apb_slave_agent #(
		.ADDR_WIDTH                (16),
		.DATA_WIDTH                (32),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (87),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (88),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_ORI_BURST_SIZE_H      (111),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (112)
	) merlin_apb_translator_0_s0_agent (
		.paddr            (merlin_apb_translator_0_s0_agent_altera_apb_master_paddr),       // altera_apb_master.paddr
		.psel             (merlin_apb_translator_0_s0_agent_altera_apb_master_psel),        //                  .psel
		.penable          (merlin_apb_translator_0_s0_agent_altera_apb_master_penable),     //                  .penable
		.pwrite           (merlin_apb_translator_0_s0_agent_altera_apb_master_pwrite),      //                  .pwrite
		.pwdata           (merlin_apb_translator_0_s0_agent_altera_apb_master_pwdata),      //                  .pwdata
		.pready           (merlin_apb_translator_0_s0_agent_altera_apb_master_pready),      //                  .pready
		.prdata           (merlin_apb_translator_0_s0_agent_altera_apb_master_prdata),      //                  .prdata
		.pslverr          (merlin_apb_translator_0_s0_agent_altera_apb_master_pslverr),     //                  .pslverr
		.paddr31          (merlin_apb_translator_0_s0_agent_altera_apb_master_paddr31),     //                  .paddr31
		.cp_valid         (merlin_apb_translator_0_s0_burst_adapter_source0_valid),         //                cp.valid
		.cp_ready         (merlin_apb_translator_0_s0_burst_adapter_source0_ready),         //                  .ready
		.cp_data          (merlin_apb_translator_0_s0_burst_adapter_source0_data),          //                  .data
		.cp_channel       (merlin_apb_translator_0_s0_burst_adapter_source0_channel),       //                  .channel
		.cp_startofpacket (merlin_apb_translator_0_s0_burst_adapter_source0_startofpacket), //                  .startofpacket
		.cp_endofpacket   (merlin_apb_translator_0_s0_burst_adapter_source0_endofpacket),   //                  .endofpacket
		.rp_valid         (merlin_apb_translator_0_s0_agent_rp_valid),                      //                rp.valid
		.rp_ready         (merlin_apb_translator_0_s0_agent_rp_ready),                      //                  .ready
		.rp_data          (merlin_apb_translator_0_s0_agent_rp_data),                       //                  .data
		.rp_startofpacket (merlin_apb_translator_0_s0_agent_rp_startofpacket),              //                  .startofpacket
		.rp_endofpacket   (merlin_apb_translator_0_s0_agent_rp_endofpacket),                //                  .endofpacket
		.clk              (clk_0_clk_clk),                                                  //               clk.clk
		.reset            (merlin_apb_translator_0_clk_reset_reset_bridge_in_reset_reset)   //         clk_reset.reset
	);

	test6_soc_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	test6_soc_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	test6_soc_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (merlin_apb_translator_0_s0_agent_rp_ready),                     //      sink.ready
		.sink_valid         (merlin_apb_translator_0_s0_agent_rp_valid),                     //          .valid
		.sink_data          (merlin_apb_translator_0_s0_agent_rp_data),                      //          .data
		.sink_startofpacket (merlin_apb_translator_0_s0_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (merlin_apb_translator_0_s0_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                                 //       clk.clk
		.reset              (merlin_apb_translator_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                          //       src.ready
		.src_valid          (router_002_src_valid),                                          //          .valid
		.src_data           (router_002_src_data),                                           //          .data
		.src_channel        (router_002_src_channel),                                        //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                     //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) merlin_apb_translator_0_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                  //       cr0.clk
		.reset                 (merlin_apb_translator_0_clk_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                              //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                               //          .data
		.sink0_channel         (cmd_mux_src_channel),                                            //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                        //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                              //          .ready
		.source0_valid         (merlin_apb_translator_0_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (merlin_apb_translator_0_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (merlin_apb_translator_0_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (merlin_apb_translator_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (merlin_apb_translator_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (merlin_apb_translator_0_s0_burst_adapter_source0_ready)          //          .ready
	);

	test6_soc_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                    //      sink.ready
		.sink_channel       (router_src_channel),                                                  //          .channel
		.sink_data          (router_src_data),                                                     //          .data
		.sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.sink_valid         (router_src_valid),                                                    //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //          .valid
		.src0_data          (cmd_demux_src0_data),                                                 //          .data
		.src0_channel       (cmd_demux_src0_channel),                                              //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                           //          .endofpacket
	);

	test6_soc_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                //      sink.ready
		.sink_channel       (router_001_src_channel),                                              //          .channel
		.sink_data          (router_001_src_data),                                                 //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.sink_valid         (router_001_src_valid),                                                //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                            //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                       //          .endofpacket
	);

	test6_soc_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                 //       clk.clk
		.reset               (merlin_apb_translator_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                                             //          .valid
		.src_data            (cmd_mux_src_data),                                              //          .data
		.src_channel         (cmd_mux_src_channel),                                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                      //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                    //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                       //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                                 //          .endofpacket
	);

	test6_soc_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                 //       clk.clk
		.reset              (merlin_apb_translator_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                          //      sink.ready
		.sink_channel       (router_002_src_channel),                                        //          .channel
		.sink_data          (router_002_src_data),                                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                          //          .valid
		.src0_data          (rsp_demux_src0_data),                                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                    //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                          //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                          //          .valid
		.src1_data          (rsp_demux_src1_data),                                           //          .data
		.src1_channel       (rsp_demux_src1_channel),                                        //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                     //          .endofpacket
	);

	test6_soc_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_src_data),                                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                           //          .endofpacket
	);

	test6_soc_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                           //          .endofpacket
	);

endmodule
